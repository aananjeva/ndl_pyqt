# import sys
# import asyncio
# import threading
# import websockets
# from PySide6.QtGui import QGuiApplication
# from PySide6.QtQml import QQmlApplicationEngine
# from PySide6.QtCore import QObject
# from user_commands import user_commands
#
# #sends messages, and receives responses in a loop
# websocket_connection = None
#
# async def websocket_handler(uri):
#     global websocket_connection #holds the connection
#     async with websockets.connect(uri) as websocket: #opens a connection to the websocket server
#         websocket_connection = websocket
#         while True: #infinite loop that allows to send and receive the data
#             # waits for a response from the Pi
#             response = await websocket.recv()
#             print(f"Received: {response}") #Im not sure if we need it
#
#             # pause between the messages
#             await asyncio.sleep(0.2)
#
# #this is for asynchronous programming
# def start_websocket(uri):
#     asyncio.run(websocket_handler(uri))
#
# def on_register_button_click(username, password, password_confirm, pictures):
#     user_commands.user_registration(username, password, password_confirm, pictures)
#
# def on_login_button_click(username, password):
#     response = user_commands.user_login(username, password)
#     if response == "success":
#         stackView.push("mainPage")
#     else:
#         print("Login failed!")
#
# def on_create_member_button_click(member_name, pictures):
#     user_commands.create_new_member(member_name, pictures)
#
# def on_change_password_button_click(current_password, new_password, confirm_password):
#     user_commands.change_password(current_password, new_password, confirm_password)
#
#
# def main():
#     app = QGuiApplication(sys.argv)
#     engine = QQmlApplicationEngine()
#
#     # Load your QML file
#     engine.load('qml.py')
#     if not engine.rootObjects():
#         sys.exit(-1)
#
#     # Get the root object
#     root_object = engine.rootObjects()[0]
#
#     # Get references to stackView and mainPage
#     global stackView
#     stackView = root_object.findChild(QObject, "stackView")
#     mainPage = root_object.findChild(QObject, "mainPage")
#
#     # Starts WebSocket client in a separate thread
#     websocket_thread = threading.Thread(target=start_websocket, args=("ws://<raspberry_pi_ip>:<port>",))
#     websocket_thread.start()
#
#     exit_code = app.exec()
#     del engine
#     sys.exit(exit_code)
#
#
# if __name__ == "__main__":
#     main()
